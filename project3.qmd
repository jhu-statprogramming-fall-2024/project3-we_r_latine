---
title: "Project 3"
format: html
editor: visual
---

Team Members:

-   Mateo Bandala Jacques \| abandal1\@jh.edu

-   María Camila Restrepo \| mrestre\@jh.edu

# Setup

```{r}
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("DBI")) install.packages("DBI")
if(!require("RSQLite")) install.packages("RSQLite")
if(!require("caret")) install.packages("caret")
if(!require("nycflights13")) install.packages("nycflights13")
if(!require("car")) install.packages("car")
if(!require("Metrics")) install.packages("Metrics")
  
library(tidyverse)
library(DBI)
library(RSQLite)
library(caret)
library(nycflights13)
library(car)
library(Metrics)


```

::: callout-note
## For our project, we will be using the NYC flights data from 2013
:::

# Part 1

We will be using flight data from nycflight13

Question to investigate:

Which airlines were the most delayed on average in 2013?
And is there a relationship between delays and weather by airlines?

**1. If it’s already a SQL database, read into R using the DBI and RSQLite packages. If it’s not already a SQL database, create a new SQL database and use the dbWriteTable() function to add at minimum three tables to the SQL database.**

```{r}

nyc_flights <- flights
nyc_airlines <- airlines
nyc_weather <- weather

# Create a connection to an SQLite database
con <- dbConnect(RSQLite::SQLite(), "nycflights13.db")

dbWriteTable(con, "nyc_flights", nyc_flights, overwrite = TRUE)
dbWriteTable(con, "nyc_airlines", nyc_airlines, overwrite = TRUE)
dbWriteTable(con, "nyc_weather", weather, overwrite = TRUE)

dbListTables(con) #all three tables are there

```

**2. Write three SQL queries using dbGetQuery() to explore and summarize the data. You must use at least five different SQL functions (e.g. SELECT, GROUP BY, DISTINCT, SUM, etc).**  

```{r}
#number of flights by origin

dbGetQuery(con, "SELECT origin, COUNT(*) AS num_flights FROM nyc_flights GROUP BY origin")
#This data set includes departures from Newark Liberty International Airport, John F. Kennedy International Airport and LaGuardia Airport.

#Delay

dbGetQuery(con, "SELECT AVG(dep_delay) FROM nyc_flights")

#delay by airline

dbGetQuery(con, "SELECT carrier, AVG(dep_delay) 
           FROM nyc_flights 
           GROUP BY carrier
           ORDER BY AVG(dep_delay) DESC")

#weather: precipitation and visibility

dbGetQuery(con, "SELECT visib, AVG(visib), MIN(visib), MAX(visib)
           FROM nyc_weather")

dbGetQuery(con, "SELECT precip, AVG(precip), MIN(precip), MAX(precip)
           FROM nyc_weather")

```


List of SQL functions used:

- COUNT
- AVG
- MIN
- MAX
- GROUP BY
- ORDER BY

**3. Write two SQL queries to create new features from existing data.**   

```{r}
#Change precipitation and visibility into the international standard

#Precipitation from inches to mm
dbExecute(con, "ALTER TABLE nyc_weather 
          ADD COLUMN precip_mm NUMERIC")
dbExecute(con, "UPDATE nyc_weather 
          SET precip_mm = precip * 25.4")

#Visibility from miles to km
dbExecute(con, "ALTER TABLE nyc_weather 
          ADD COLUMN visib_km NUMERIC")
dbExecute(con, "UPDATE nyc_weather 
          SET visib_km = visib * 1.60934")

dbListFields(con, "nyc_weather")

#how did that change the values
dbGetQuery(con, "SELECT visib_km, AVG(visib_km), MIN(visib_km), MAX(visib_km)
           FROM nyc_weather")

dbGetQuery(con, "SELECT precip_mm, AVG(precip_mm), MIN(precip_mm), MAX(precip_mm)
           FROM nyc_weather")

#Merge the name of the airlines, precipitation and visibility

dbGetQuery(con, "SELECT COUNT(*) FROM nyc_flights")

merged <- dbGetQuery(con, "
    SELECT f.*, w.precip_mm, w.visib_km
    FROM nyc_flights AS f
    INNER JOIN nyc_weather AS w
    ON f.time_hour = w.time_hour
")
nrow(merged) #we have more rows than expected so we need to check why

time <- dbGetQuery(con, "SELECT time_hour, COUNT(*) 
           FROM nyc_weather 
           GROUP BY time_hour HAVING COUNT(*) > 1
           ORDER BY COUNT(*) ASC") 
head(time, 20)

#most of them have a count of 3 and this is because of the 3 different origins. So we need to update our dataset. Some of them only have two which means that they don't have weather data on some airports

merged <- dbGetQuery(con, "
    SELECT f.*, w.precip_mm, w.visib_km
    FROM nyc_flights AS f
    INNER JOIN nyc_weather AS w
    ON f.time_hour = w.time_hour AND f.origin = w.origin
")

nrow(merged) #it seems that some flights were not matched, as the observations decreased from 336776 to 335220

dbDisconnect(con)

merged <- merged %>%
  right_join(nyc_airlines, by = "carrier") %>%
   rename(
    precip = precip_mm,
    visib = visib_km
  )

```

**4. Visualize your data by creating a plot with ggplot2.**  

Departure delay:

```{r}
summary(merged$dep_delay) #need to exclude NAs for calculations

#visualizing departure delay by airline

merged <- merged %>%
  mutate(name = factor(name))

levels(merged$name) #name is now a factor ordered in alphabetical order

delay <- merged %>%
  group_by(name) %>%
  summarise(avg_delay = mean(dep_delay, na.rm = TRUE))

delay <- delay %>%
  mutate(name = fct_reorder(name, avg_delay, .desc = TRUE)) %>%
  arrange(desc(avg_delay))

delay

levels(delay$name)

merged <- merged %>%
  mutate(name = factor(name, levels = levels(delay$name))) #now we reordered the levels of the airlines according to most delayed to least delayed on average
  
delay %>%
  ggplot(aes(x = avg_delay, y = name)) +
  geom_col() +
  labs(title = "Departure Delay by National Airlines leaving from New York in 2013", 
       subtitle = "Includes flights departing from the Newark Liberty International Airport, \nJohn F. Kennedy International Airport and LaGuardia Airport.",
       x = "Average departure delay (minutes)", y = "Airline", ) +
  theme_minimal()

#arrival delay
merged %>%
  group_by(name) %>%
  summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
  arrange(desc(avg_delay))
#the results are similar for the airlines with most delay. We will only plot departure delay because it is the metric airlines take into consideration.
```

The influence of weather on departure delay:

```{r, fig.width=10, fig.height=8}

#precipitation

merged %>%
  filter(!is.na(dep_delay)) %>%
   ggplot(aes(x = precip, y = dep_delay)) +
  geom_point() +
  facet_wrap(~ name) +
  labs(title = "Relationship between Precipitation and Departure Delay by Airline in National Flights Leaving from New York in 2013",
       subtitle = "Includes flights departing from the Newark Liberty International Airport, John F. Kennedy International Airport and LaGuardia Airport.",
       x = "Precipitation (mm)",
       y = "Departure delay (minutes)") +
  ylim(0,800)

#visibility

merged %>%
  filter(!is.na(dep_delay)) %>%
   ggplot(aes(x = visib, y = dep_delay)) +
  geom_point() +
  facet_wrap(~ name) +
  labs(title = "Relationship between Visibility and Departure Delay by Airline in National Flights Leaving from New York in 2013",
       subtitle = "Includes flights departing from the Newark Liberty International Airport, John F. Kennedy International Airport and LaGuardia Airport.",
       x = "Visibility (km)",
       y = "Departure delay (minutes)") +
  ylim(0,800)
    
```


**5. Report your findings. Provide a paragraph summarizing your methods and key findings. Include any limitations or potential biases in your analysis.**

We analyzed departure delays for domestic flights departing from New York's Newark Liberty International Airport, John F. Kennedy International Airport, and LaGuardia Airport during 2013. Data from 16 airlines were sourced from the nycflights13 package, and the flight, airline, and weather datasets were transformed into an SQL database for querying. SQL queries were used to investigate variables of interest, including departure delays, airline performance, and weather conditions. Finally, visualizations were created to further explore and characterize departure delays.  

The average departure delay in 2013 for domestic flights was 12.6 minutes. The airlines with the longest average delays were Frontier Airlines, ExpressJet Airlines, Mesa Airlines, AirTran Airways Corporation, and Southwest Airlines, with average delays ranging from 20.3 to 17.7 minutes.  

We also explored the relationship between two weather variables—precipitation and visibility—and departure delays. Our hypothesis was that increased precipitation would correlate positively with delays, while decreased visibility would correlate negatively. However, visual analysis revealed no clear linear relationship between precipitation (in mm) and departure delays, even when stratified by airline. Similarly, no apparent linear relationship was observed between visibility and departure delays across airlines.  

This analysis has several limitations that could impact the results. Confounding factors such as air traffic congestion, mechanical or technical issues, flight schedules, time of day, day of the week, and flight destinations were not accounted for, despite their likely influence on delays. For example, busier times or routes with higher congestion may systematically affect departure times. Additionally, we did not perform statistical tests, such as regression analysis, to quantify relationships or adjust for these potential confounders. This limits our ability to draw definitive conclusions about the relationship between weather and delays.  


# Part 2

```{r}

nyc_flights <- flights

#Add weather!
nyc_flights <- flights %>%
  left_join(weather, by = c("year", "month", "day", "hour", "origin"))

#Our outcome of interest will be "ARRIVAL DELAY"

#Let's look at a simple boxplot of arrival delay
nyc_flights %>%
  filter(!is.na(arr_delay)) %>%
  slice_sample(n=1000)%>%
  ggplot(aes(x=arr_delay)) +
  scale_x_continuous(limits = c(0,200)) +
  geom_vline(xintercept = 30, color="red")+  #Maybe we could consider a cut-ff of 30 if we decide to go binary
  geom_bar() +
  labs(x="Departure delay", y="Count", title = "Histogram of arrival delay",
       subtitle = "NYC, 2013", caption = "Random sample of 1,000 flights")


#First, split the data into training and testing set

#Set seed
set.seed(89631139) 


#Keep only those rows with outcome data (arrival delay)
nyc_flights <- nyc_flights %>% filter(!is.na(arr_delay))

# Create partition indices (7 to 3)


train_index <- createDataPartition(nyc_flights$arr_delay, p = 0.7, list = FALSE)

# Split the data
train_data <- nyc_flights[train_index, ]
test_data <- nyc_flights[-train_index, ]

dim(train_data)
dim(test_data) #Looks good 





```

::: callout-note
## First, we will select which predictors to include by using Recursive Feature Elimination
:::

```{r}

#Let's use linear model, 5k crossvalidation
control <- rfeControl(functions = lmFuncs, method = "cv", number = 5)

# Perform RFE using some prespecified predictors
#Departure delay (obvious), distance,  Temperature, precipitation, and  wind speed

rfe_results <- rfe(
  train_data[, c("dep_delay", "distance", "temp", "precip", "wind_speed")], # Predictors
  train_data$arr_delay,                                # Outcome
  sizes = c(1:5),                                      # Test with 1 up to 5 predictors
  rfeControl = control #using linear regression with 5-fold cross validation
)

# View the optimal predictors
print(rfe_results)  #Using all 5 predictors has the lowest mean squared errors

# Plot RFE results

rfe_results %>%
  ggplot() +
  labs(x="Number of variables", y = "RMSE by CV",
       title = "Results of RFE", subtitle = "Using linear regression with 5 fold CV",
       caption  = "Model favours using all 5 variables")




```

::: callout-note
## Now let's train the model
:::

```{r}
#these are our optimal variables: 
optimal_predictors <- rfe_results$optVariables


#Let's fir a linear regression
formula <- as.formula(paste("arr_delay ~", paste(optimal_predictors, collapse = " + ")))
lm_model <- lm(formula, data = train_data)

#Let's look at the model output

summary(lm_model)

vif(lm_model) #There seems to be no issues with colinearity 




#Let's test the model

#First evaluate missingness
test_data %>%
  summarise(across(
    all_of(c("arr_delay", "dep_delay", "distance", "temp", "precip", "wind_speed")), 
    ~ sum(is.na(.)), 
    .names = "missing_{.col}"
  ))

# A small proportion of predictors are missing, we will simply get rid of them for now
test_data <- test_data %>%
  filter(if_all(
    all_of(c("arr_delay", "dep_delay", "distance", "temp", "precip", "wind_speed")), 
    ~ !is.na(.)
  ))

#now the prediction proper 

test_predictions <- predict(lm_model, newdata = test_data)




# Evaluate model performance

rmse_value <- rmse(test_data$arr_delay, test_predictions)
mae_value <- mae(test_data$arr_delay, test_predictions)
r_squared <- cor(test_data$arr_delay, test_predictions)^2

# Print metrics
cat("RMSE:", rmse_value, "\n") #this was 17.84 in the training set
cat("MAE:", mae_value, "\n")  #This was13 in the training set 
cat("R-squared:", r_squared, "\n") #this was 84 in the training set



ggplot(data = test_data, aes(x = test_predictions, y = arr_delay)) +
  geom_point(alpha = 0.5) +
  geom_abline(slope = 1, intercept = 0, color = "red") +
  ggtitle("Actual vs Predicted Arrival Delays") +
  xlab("Predicted Arrival Delay") +
  ylab("Actual Arrival Delay")


```
Summary of out study objective, methods and main findings:

Our study objective was to predict arrival delay for flights in the NYC area in 2013 using the nycflights13 dataset. For this, we focused on the continuous outcome arr_delay (arrival delay in minutes). 

Using the caret package, we split the data into training (70%) and testing (30%) subsets, after excluding rows where the outcome was missing. To identify the most important predictors, we used Recursive Feature Elimination (RFE) with a linear regression model and 5-fold cross-validation. Our initial predictors included dep_delay, distance, temp, precip, and wind_speed. The RFE results showed that all five predictors were optimal.


Using these predictors, we trained a linear regression model on the training data. From the model, we found that departure delays are roughly linear predictors of arrical delay (that is, for one minute in delay of the departure, expect one minute of delay of arrival). We also found that longer distance flights are less likely to be delayed. For example, for each thousand kilometers of flight, flights tend to arrive 2.5 minutes earlier. Similarly, lower temperatures, high wind speed and precipitation were all associated with delays.

We then evaluated the model's performance on the testing data by calculating the Root Mean Squared Error (RMSE), Mean Absolute Error (MAE), and R-squared. The model achieved an RMSE of 17.86 minutes, a MAE of 13.02 minutes, and an R-squared value of 0.84.

One key limitation is thar weather and temperature might be associated to calendar days (and thus holidays), which could be strongly associated to delays. Furthermore, this data was only trained on New York City airports, which are large, and might not be generalizable to airports abroad or elsewhere in the U.S.

In summary, if a flight is delayed on departure, the minutes of delay are good predictors of minutes of arrival delay. Furthermore, shorter flights in cold, rainy days are likely to result in arrival delays. 